import scipy as sp
import matplotlib.pyplot as plt
from mapspec.spectrum import TextSpec,TextSpec_2c,EmissionLine,LineModel

#window = [ [6336,6950],[6200,6336],[6950,7150] ] #Halpha
window = [ [4821,5009],[4672,4711],[5167,5207] ] #Hbeta
oiii = [ [5066,5108],[5057,5066],[5108,5165] ]

s = TextSpec('test.dat')


l = EmissionLine(s,window[0],[window[1],window[2]])
plt.plot(l.wv,l.f,'k')

#single components
mg = LineModel(l,func = 'gaussian')
mh = LineModel(l,func = 'gauss-hermite')
ml = LineModel(l,func = 'lorentzian')
mv = LineModel(l,func = 'approx-voigt')

OIII = EmissionLine(s,oiii[0],[oiii[1],oiii[2]])
OIII.wv -= OIII.wv.mean()
#OIII.set_interp(style='sinc')
w = (l.wv >= 4930)*(l.wv <= 4950)
mdat = LineModel(l,func = 'data',window = w, linedata = OIII)

print mg.chi2()
print mh.chi2()
print ml.chi2()
print mv.chi2()
#what to do with mdat here?

xgrid = sp.r_[l.wv.min():l.wv.max() + 1:1000j]
plt.plot(xgrid,mg(xgrid),'m',label='gauss')
plt.plot(xgrid,mh(xgrid),'orange',label='hermite')
plt.plot(xgrid,ml(xgrid),color='r',label='lorentz')
plt.plot(xgrid,mv(xgrid),color='purple',label='voigt')
print len(OIII.wv + mdat.p[1]),len(mdat(OIII.wv + mdat.p[1]))
#plt.plot(OIII.wv + mdat.p[1],mdat(OIII.wv + mdat.p[1]),
#         color='g',label='OIII rescaled')
plt.legend(loc='upper left')
#floating lines

mgf = LineModel(l,func = 'gaussian',window = w,floating=1)
mhf = LineModel(l,func = 'gauss-hermite',window = w,floating=1)
mlf = LineModel(l,func = 'lorentzian',window = w,floating=1)
mvf = LineModel(l,func = 'approx-voigt',window = w,floating=1)

print mgf.chi2()
print mhf.chi2()
print mlf.chi2()
print mvf.chi2()
plt.figure()
plt.plot(l.wv,l.f,'k')
low,u = plt.gca().get_ylim()
xgrid2 = sp.r_[4920:4960:100j]
#plt.fill_between([4926,4956],[low,low],[u,u],color='r',alpha=0.5)
plt.plot(xgrid2,mgf(xgrid2),'m',label='gauss')
#plt.plot(xgrid2,mhf(xgrid2),'orange',label='hermite')
#plt.plot(xgrid2,mlf(xgrid2),color='r',label='lorentz')
#plt.plot(xgrid2,mvf(xgrid2),color='purple',label='voigt')
plt.plot(OIII.wv + mdat.p[1],mdat(OIII.wv + mdat.p[1]),color='g',label='OIII rescaled')

mask = (l.wv >= OIII.wv.min()  + mdat.p[1])*(l.wv <= OIII.wv.max() + mdat.p[1] )
print l.wv[mask].min(), OIII.wv.min() + mdat.p[1]

l.f[mask] -= mdat(l.wv[mask]) - mdat.p[-1]
plt.plot(l.wv,l.f,'b')
l.f[mask] += mdat(l.wv[mask]) - mdat.p[-1]

l.f[mask] -= mgf(l.wv[mask]) - mgf.p[-1]
plt.plot(l.wv,l.f,'m')
l.f[mask] += mgf(l.wv[mask]) - mgf.p[-1]

plt.legend(loc='upper right')
#multi components
mg2 = LineModel(l,func = 'gaussian',nline = 5)
mh2 = LineModel(l,func = 'gauss-hermite',nline = 3)
ml2 = LineModel(l,func = 'lorentzian',nline = 5)
mv2 = LineModel(l,func = 'approx-voigt',nline = 5)

print mg2.chi2()
print mh2.chi2()
print ml2.chi2()
print mv2.chi2()
plt.figure()
a = plt.gca()
a.plot(l.wv,l.f,'k')
a.plot(xgrid,mg2(xgrid),'r',label='gauss')
a.plot(xgrid,mh2(xgrid),'orange',label='hermite')
a.plot(xgrid,ml2(xgrid),color='r',label='lorentz')
a.plot(xgrid,mv2(xgrid),color='purple',label='voigt')

mg2.plot_components(xgrid,a,'r')
#mh2.plot_components(xgrid,a,'orange')
#ml2.plot_components(xgrid,a,'r')
#mv2.plot_components(xgrid,a,'purple')
plt.legend(loc='upper right')
plt.show()
